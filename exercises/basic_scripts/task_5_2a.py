# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

prefix = input('Input ip and mask (example 10.1.1.12/24): ')

prefix_list = prefix.split('.')
slash_id = prefix_list[3].find('/')
mask = prefix_list[3][slash_id:]
prefix_list[3] = prefix_list[3][:slash_id]
mask_len = int(mask[1:])

mask_bin = '1'*mask_len + '0'*(32 - mask_len)
mask_dec = f'{int(mask_bin[0:8],2):<10}{int(mask_bin[8:16], 2):<10}{int(mask_bin[16:24], 2):<10}{int(mask_bin[24:32], 2):<10}'

ip_addr_1 = f'{int(prefix_list[0]):<10}{int(prefix_list[1]):<10}{int(prefix_list[2]):<10}{int(prefix_list[3]):<10}'
ip_addr_2 = '{:08b}  {:08b}  {:08b}  {:08b}'.format(int(prefix_list[0]), int(prefix_list[1]), int(prefix_list[2]), int(prefix_list[3]))

mask_bits = f'{mask_bin[0:8]}  {mask_bin[8:16]}  {mask_bin[16:24]}  {mask_bin[24:32]}'



print('Network:')
print(ip_addr_1)
print(ip_addr_2 + '\n')
print('Mask:')
print(mask)
print(mask_dec)
print(mask_bits)
